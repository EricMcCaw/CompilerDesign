grammar gram;

COMMENT : '//' .*? '\n' -> skip ;
SEMI : ';' ;
WHILE : 'while' ;
LP : '(' ;
RP : ')' ;
IF : 'if' ;
ELSE : 'else' ;
RETURN : 'return' ;
LBR : '{' ;
RBR : '}' ;
FPNUM : ([0-9]+'.'[0-9]*|'.'[0-9]+)([Ee][-+]?[0-9]+)?|'-'?[0-9]+[Ee][-+]?[0-9]+ ;
NUM : [0-9]+ | '-' [0-9]+ ;
OR : 'or' ;
AND : 'and' ;
NOT : 'not' ;
RELOP : '>='|'<='|'>'|'<'|'!='|'==' ;
EQ : '=' ;
PLUS : '+' ;
MULOP : [*/] ;
MINUS : '-' ;
CMA : ',' ;
TYPE : ('int'|'string'|'double') ;
STRINGCONSTANT : '"' ( '\\"' | ~["] )* '"' ;
PRINT : 'print' ;
INPUT : 'input' ;
OPEN : 'open' ;
READ : 'read' ;
WRITE : 'write' ;
CLOSE : 'close' ;
ID : [A-Za-z_]+ ;
WHITESPACE : [ \t\r\n]+ -> skip ;

program : vardecllist braceblock EOF ;
stmts : stmt stmts |  ;
stmt : cond | loop | returnstmt SEMI | assign SEMI | funccall SEMI;
loop : WHILE LP expr RP braceblock;
cond : IF LP expr RP braceblock | IF LP expr RP braceblock ELSE braceblock;
braceblock : LBR stmts RBR;
returnstmt : RETURN expr;
expr : orexp;
orexp : orexp OR andexp | andexp ;
andexp : andexp AND notexp | notexp;
notexp :  NOT notexp | rel;
rel : sum RELOP sum | sum;
sum :  sum PLUS term | sum MINUS term | term;
term :  term MULOP neg | neg;
neg :  MINUS neg | factor;
factor :  NUM | LP expr RP | FPNUM | ID | STRINGCONSTANT | funccall;
vardecllist : vardecl SEMI vardecllist |  ;
vardecl : TYPE ID;
assign : ID EQ expr;
funccall : builtinfunccall | userfunccall;
userfunccall : ID LP optionalexprlist RP;
optionalexprlist :   | exprlist;
exprlist : exprlist CMA expr | expr;
builtinfunccall : PRINT LP expr RP | INPUT LP RP | OPEN LP expr RP | READ LP expr RP | WRITE LP expr CMA expr RP | CLOSE LP expr RP ;
